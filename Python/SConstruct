# -*- mode:python; coding:utf-8; -*-

#  Calculation of π using quadrature.
#
#  Copyright © 2008–2017  Russel Winder

#  Some of the Python codes rely on extensions written in various languages,
#  notably C, C++, D.
#
#  Cython and Pyrex need access to the Python headers when compiling the
#  generated C and so are Python version dependent.

# Everything here relies on running on Python 3.

import os
from os.path import splitext
import sys

os_name, _, _, _, _ = os.uname()
major, minor, _, _, _ = sys.version_info

if os_name == 'Darwin':
    cython_command_name = 'cython'
    python_include_path = (
        # MacPorts location of Python header files.
        '/opt/local/Library/Frameworks/Python.framework/Versions/{0}.{1}/include/python{0}.{1}m'.format(major, minor),
    )
elif os_name == 'Linux':
    cython_command_name = 'cython3'
    python_include_path = (
        # Debian and Fedora location of Python header files.
        '/usr/include/python{}.{}m'.format(major, minor),
    )
else:
    print('Unknown platform.')
    Exit(1)

cythonEnvironment = Environment(
    tools=['gcc', 'gnulink'],
    CPPPATH=[python_include_path],
    CFLAGS=['-std=c11', '-O3', '-Wall', '-Wextra', '-fopenmp'],
    LINKFLAGS=[],
    LIBS=['-lgomp'],
    SHLIBPREFIX='',
)

cppEnvironment = Environment(
    tools=['g++', 'gnulink'],
    CPPPATH=[],
    CXXFLAGS=['-std=c++17', '-O3', '-Wall', '-Wextra'],
    LINKFLAGS=[],
    SHLIBPREFIX='',
)

cppLibraryEnvironment = cppEnvironment.Clone()
cppLibraryEnvironment.Append(CXXFLAGS='-fPIC')

dEnvironment = {
    'dmd': Environment(
        tools=['dmd', 'link'],
        DFLAGS=['-O', '-release', '-inline'],
        SHLIBPREFIX='',
    ),
    'ldc': Environment(
        tools=['ldc', 'link'],
        DFLAGS=['-O', '-release'],
        SHLIBPREFIX='',
    ),
    'gdc': Environment(
        tools=['gdc', 'link'],
        DFLAGS=['-O3'],
        SHLIBPREFIX='',
    ),
}[
    #'dmd'
    'ldc'
    #'gdc'
]

for item in Glob('*.pyx'):
    root, _ = splitext(item.name)
    cythonEnvironment.SharedLibrary(root + '.so', Command(root + '.c', item, '{} $SOURCE'.format(cython_command_name)))

for item in Glob('*_library_*.cpp'):
    cppLibraryEnvironment.SharedLibrary(splitext(item.name)[0] + '.so', item)

for item in Glob('*_library_*.d'):
    dEnvironment.SharedLibrary(splitext(item.name)[0] + '.so', item)

cppExtensionEnvironment = cppLibraryEnvironment.Clone()
cppExtensionEnvironment.Append(CPPPATH=python_include_path)
cppExtensionEnvironment.Append(CPPPATH='/home/Checkouts/Git/PyBind11/include')
for item in Glob('*_extension_*.cpp'):
    cppExtensionEnvironment.SharedLibrary(splitext(item.name)[0] + '.so', item)
