# -*- mode:python; coding:utf-8; -*-

#  Calculation of π using quadrature.
#
#  Copyright © 2008–2015  Russel Winder

#  Some of the Python codes rely on extensions written in various languages, natably C, C++, D, Chapel.
#
#  Cython and Pyrex need access to the Python headers when compiling the generated C and so are Python
#  version dependent.

from __future__ import print_function

import os
from os.path import splitext

os_name, _, os_number, _, _ = os.uname()

if os_name == 'Darwin':
    cython_command_name = 'cython'
    python_include_path = (
        # MacPorts location of Python 3.4 header files.
        '/opt/local/Library/Frameworks/Python.framework/Versions/3.5/include/python3.4m',
    )
elif os_name == 'Linux':
    cython_command_name = 'cython3'
    python_include_path = (
        # Debian and Fedora location of Python 3.5 header files.
        '/usr/include/python3.5m',
    )
else:
    print('Unknown platform.')
    Exit(1)

is_fedora = '.fc' in os_number

cythonEnvironment = Environment(
    tools=['gcc', 'gnulink'],
    CPPPATH=[python_include_path],
    CFLAGS=['-std=c11', '-O3', '-Wall', '-Wextra', '-fopenmp'],
    LINKFLAGS=[],
    LIBS=['-lgomp'],
    SHLIBPREFIX='',
)

cppEnvironment = Environment(
    tools=['g++', 'gnulink'],
    CPPPATH=[],
    CXXFLAGS=['-std=c++14', '-O3', '-Wall', '-Wextra'],
    LINKFLAGS=[],
    SHLIBPREFIX='',
)

cppLibraryEnvironment = cppEnvironment.Clone()
cppLibraryEnvironment.Append(CXXFLAGS='-fPIC')

# NB DMD 2.071.1 has problems with parallelism module.
# Cannot use GDC on a Debian machine with LDC installed.
dEnvironment = {
    'dmd': Environment(
        tools=['dmd', 'link'],
        DFLAGS=['-O', '-release', '-inline'],
        SHLIBPREFIX='',
    ),
    'ldc': Environment(
        # LDC is installed from packages for the production version and I compile head of the latest branch.
        # Having this ENV set or not switches between them: not means package.
        #ENV=os.environ,
        tools=['ldc', 'link'],
        DFLAGS=['-O', '-release'],
        SHLIBPREFIX='',
    ),
    'gdc': Environment(
        tools=['gdc', 'link'],
        DFLAGS=['-O3'],
        SHLIBPREFIX='',
    ),
}[
    #'dmd'
    'ldc'
    #'gdc'
]

chapelEnvironment = Environment(
    ENV=os.environ,
)

for item in Glob('*.pyx'):
    root, _ = splitext(item.name)
    cythonEnvironment.SharedLibrary(root + '.so', Command(root + '.c', item, '{} $SOURCE'.format(cython_command_name)))

for item in Glob('*_library_*.cpp'):
    cppLibraryEnvironment.SharedLibrary(splitext(item.name)[0] + '.so', item)

for item in Glob('*_library_*.d'):
    dEnvironment.SharedLibrary(splitext(item.name)[0] + '.so', item)

for item in Glob('*_library_*.chpl'):
    so_name = splitext(item.name)[0]
    chapelEnvironment.Command(so_name + '.so', item, 'chpl --dynamic --library -o {} $SOURCE'.format(so_name))

cppExtensionEnvironment = cppLibraryEnvironment.Clone()
cppExtensionEnvironment.Append(CPPPATH=python_include_path)
cppExtensionEnvironment.Append(RPATH='./')
cppExtensionEnvironment.Append(LIBS='-lboost_python3' if is_fedora else '-lboost_python-py35')

for item in Glob('*_extension_*.cpp'):
    cppExtensionEnvironment.SharedLibrary(splitext(item.name)[0] + '.so', item)
